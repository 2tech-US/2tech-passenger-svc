// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: internal/pb/passenger.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	CreatePassenger(ctx context.Context, in *CreatePassengerRequest, opts ...grpc.CallOption) (*CreatePassengerResponse, error)
	GetPassengerByPhone(ctx context.Context, in *GetPassengerByPhoneRequest, opts ...grpc.CallOption) (*GetPassengerByPhoneResponse, error)
	ListPassengers(ctx context.Context, in *ListPassengersRequest, opts ...grpc.CallOption) (*ListPassengersResponse, error)
	UpdatePassenger(ctx context.Context, in *UpdatePassengerRequest, opts ...grpc.CallOption) (*UpdatePassengerResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	VerifyPassenger(ctx context.Context, in *VerifyPassengerRequest, opts ...grpc.CallOption) (*VerifyPassengerResponse, error)
	DeletePassenger(ctx context.Context, in *DeletePassengerRequest, opts ...grpc.CallOption) (*DeletePassengerResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) CreatePassenger(ctx context.Context, in *CreatePassengerRequest, opts ...grpc.CallOption) (*CreatePassengerResponse, error) {
	out := new(CreatePassengerResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/CreatePassenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetPassengerByPhone(ctx context.Context, in *GetPassengerByPhoneRequest, opts ...grpc.CallOption) (*GetPassengerByPhoneResponse, error) {
	out := new(GetPassengerByPhoneResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetPassengerByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListPassengers(ctx context.Context, in *ListPassengersRequest, opts ...grpc.CallOption) (*ListPassengersResponse, error) {
	out := new(ListPassengersResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/ListPassengers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdatePassenger(ctx context.Context, in *UpdatePassengerRequest, opts ...grpc.CallOption) (*UpdatePassengerResponse, error) {
	out := new(UpdatePassengerResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/UpdatePassenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyPassenger(ctx context.Context, in *VerifyPassengerRequest, opts ...grpc.CallOption) (*VerifyPassengerResponse, error) {
	out := new(VerifyPassengerResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/VerifyPassenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeletePassenger(ctx context.Context, in *DeletePassengerRequest, opts ...grpc.CallOption) (*DeletePassengerResponse, error) {
	out := new(DeletePassengerResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/DeletePassenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	CreatePassenger(context.Context, *CreatePassengerRequest) (*CreatePassengerResponse, error)
	GetPassengerByPhone(context.Context, *GetPassengerByPhoneRequest) (*GetPassengerByPhoneResponse, error)
	ListPassengers(context.Context, *ListPassengersRequest) (*ListPassengersResponse, error)
	UpdatePassenger(context.Context, *UpdatePassengerRequest) (*UpdatePassengerResponse, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	VerifyPassenger(context.Context, *VerifyPassengerRequest) (*VerifyPassengerResponse, error)
	DeletePassenger(context.Context, *DeletePassengerRequest) (*DeletePassengerResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) CreatePassenger(context.Context, *CreatePassengerRequest) (*CreatePassengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePassenger not implemented")
}
func (UnimplementedAuthServiceServer) GetPassengerByPhone(context.Context, *GetPassengerByPhoneRequest) (*GetPassengerByPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassengerByPhone not implemented")
}
func (UnimplementedAuthServiceServer) ListPassengers(context.Context, *ListPassengersRequest) (*ListPassengersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPassengers not implemented")
}
func (UnimplementedAuthServiceServer) UpdatePassenger(context.Context, *UpdatePassengerRequest) (*UpdatePassengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassenger not implemented")
}
func (UnimplementedAuthServiceServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedAuthServiceServer) VerifyPassenger(context.Context, *VerifyPassengerRequest) (*VerifyPassengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPassenger not implemented")
}
func (UnimplementedAuthServiceServer) DeletePassenger(context.Context, *DeletePassengerRequest) (*DeletePassengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassenger not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_CreatePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePassengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreatePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/CreatePassenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreatePassenger(ctx, req.(*CreatePassengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetPassengerByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPassengerByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetPassengerByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetPassengerByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetPassengerByPhone(ctx, req.(*GetPassengerByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListPassengers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPassengersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListPassengers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/ListPassengers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListPassengers(ctx, req.(*ListPassengersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdatePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePassengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdatePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/UpdatePassenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdatePassenger(ctx, req.(*UpdatePassengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyPassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPassengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyPassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/VerifyPassenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyPassenger(ctx, req.(*VerifyPassengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeletePassenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePassengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeletePassenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/DeletePassenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeletePassenger(ctx, req.(*DeletePassengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePassenger",
			Handler:    _AuthService_CreatePassenger_Handler,
		},
		{
			MethodName: "GetPassengerByPhone",
			Handler:    _AuthService_GetPassengerByPhone_Handler,
		},
		{
			MethodName: "ListPassengers",
			Handler:    _AuthService_ListPassengers_Handler,
		},
		{
			MethodName: "UpdatePassenger",
			Handler:    _AuthService_UpdatePassenger_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _AuthService_UpdatePassword_Handler,
		},
		{
			MethodName: "VerifyPassenger",
			Handler:    _AuthService_VerifyPassenger_Handler,
		},
		{
			MethodName: "DeletePassenger",
			Handler:    _AuthService_DeletePassenger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pb/passenger.proto",
}
